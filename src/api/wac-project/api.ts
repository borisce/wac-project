/* tslint:disable */
/* eslint-disable */
/**
 * Waiting List Api
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xcernak@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppointmentsList
 */
export interface AppointmentsList {
    /**
     * Unique id of the appointment in this appointments list
     * @type {string}
     * @memberof AppointmentsList
     */
    'id': string;
    /**
     * Name of patient in appointments list
     * @type {string}
     * @memberof AppointmentsList
     */
    'name'?: string;
    /**
     * Date of the appointment
     * @type {string}
     * @memberof AppointmentsList
     */
    'date': string;
    /**
     * Estimated start time of the appointment
     * @type {string}
     * @memberof AppointmentsList
     */
    'estimatedStart': string;
    /**
     * Estimated end time of the appointment
     * @type {string}
     * @memberof AppointmentsList
     */
    'estimatedEnd': string;
    /**
     * Indicate whether appointment is allocated to patient or not
     * @type {boolean}
     * @memberof AppointmentsList
     */
    'patientAppointed': boolean;
    /**
     * Describes reason of the appointment
     * @type {string}
     * @memberof AppointmentsList
     */
    'condition'?: string;
    /**
     * Additional information related to the appointment written by doctor
     * @type {string}
     * @memberof AppointmentsList
     */
    'doctorNote'?: string;
}

/**
 * AppointmentsListApi - axios parameter creator
 * @export
 */
export const AppointmentsListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new appointment
         * @summary Creates a new appointment
         * @param {AppointmentsList} appointmentsList Appointment to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment: async (appointmentsList: AppointmentsList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentsList' is not null or undefined
            assertParamExists('createAppointment', 'appointmentsList', appointmentsList)
            const localVarPath = `/appointment-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentsList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an appointment by ID
         * @summary Deletes an appointment
         * @param {string} id ID of the appointment to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAppointment', 'id', id)
            const localVarPath = `/appointment-list/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all appointments
         * @summary Provides the appointments list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/appointment-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an appointment by ID
         * @summary Updates an appointment
         * @param {string} id ID of the appointment to update
         * @param {AppointmentsList} appointmentsList Updated appointment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment: async (id: string, appointmentsList: AppointmentsList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAppointment', 'id', id)
            // verify required parameter 'appointmentsList' is not null or undefined
            assertParamExists('updateAppointment', 'appointmentsList', appointmentsList)
            const localVarPath = `/appointment-list/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentsList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppointmentsListApi - functional programming interface
 * @export
 */
export const AppointmentsListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppointmentsListApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new appointment
         * @summary Creates a new appointment
         * @param {AppointmentsList} appointmentsList Appointment to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointment(appointmentsList: AppointmentsList, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointment(appointmentsList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an appointment by ID
         * @summary Deletes an appointment
         * @param {string} id ID of the appointment to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppointment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all appointments
         * @summary Provides the appointments list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppointmentsList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmentsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an appointment by ID
         * @summary Updates an appointment
         * @param {string} id ID of the appointment to update
         * @param {AppointmentsList} appointmentsList Updated appointment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointment(id: string, appointmentsList: AppointmentsList, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppointment(id, appointmentsList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppointmentsListApi - factory interface
 * @export
 */
export const AppointmentsListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppointmentsListApiFp(configuration)
    return {
        /**
         * Create a new appointment
         * @summary Creates a new appointment
         * @param {AppointmentsList} appointmentsList Appointment to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(appointmentsList: AppointmentsList, options?: any): AxiosPromise<void> {
            return localVarFp.createAppointment(appointmentsList, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an appointment by ID
         * @summary Deletes an appointment
         * @param {string} id ID of the appointment to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointment(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAppointment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all appointments
         * @summary Provides the appointments list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentsList(options?: any): AxiosPromise<Array<AppointmentsList>> {
            return localVarFp.getAppointmentsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update an appointment by ID
         * @summary Updates an appointment
         * @param {string} id ID of the appointment to update
         * @param {AppointmentsList} appointmentsList Updated appointment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointment(id: string, appointmentsList: AppointmentsList, options?: any): AxiosPromise<void> {
            return localVarFp.updateAppointment(id, appointmentsList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppointmentsListApi - interface
 * @export
 * @interface AppointmentsListApi
 */
export interface AppointmentsListApiInterface {
    /**
     * Create a new appointment
     * @summary Creates a new appointment
     * @param {AppointmentsList} appointmentsList Appointment to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApiInterface
     */
    createAppointment(appointmentsList: AppointmentsList, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Delete an appointment by ID
     * @summary Deletes an appointment
     * @param {string} id ID of the appointment to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApiInterface
     */
    deleteAppointment(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get all appointments
     * @summary Provides the appointments list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApiInterface
     */
    getAppointmentsList(options?: AxiosRequestConfig): AxiosPromise<Array<AppointmentsList>>;

    /**
     * Update an appointment by ID
     * @summary Updates an appointment
     * @param {string} id ID of the appointment to update
     * @param {AppointmentsList} appointmentsList Updated appointment details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApiInterface
     */
    updateAppointment(id: string, appointmentsList: AppointmentsList, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * AppointmentsListApi - object-oriented interface
 * @export
 * @class AppointmentsListApi
 * @extends {BaseAPI}
 */
export class AppointmentsListApi extends BaseAPI implements AppointmentsListApiInterface {
    /**
     * Create a new appointment
     * @summary Creates a new appointment
     * @param {AppointmentsList} appointmentsList Appointment to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApi
     */
    public createAppointment(appointmentsList: AppointmentsList, options?: AxiosRequestConfig) {
        return AppointmentsListApiFp(this.configuration).createAppointment(appointmentsList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an appointment by ID
     * @summary Deletes an appointment
     * @param {string} id ID of the appointment to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApi
     */
    public deleteAppointment(id: string, options?: AxiosRequestConfig) {
        return AppointmentsListApiFp(this.configuration).deleteAppointment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all appointments
     * @summary Provides the appointments list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApi
     */
    public getAppointmentsList(options?: AxiosRequestConfig) {
        return AppointmentsListApiFp(this.configuration).getAppointmentsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an appointment by ID
     * @summary Updates an appointment
     * @param {string} id ID of the appointment to update
     * @param {AppointmentsList} appointmentsList Updated appointment details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentsListApi
     */
    public updateAppointment(id: string, appointmentsList: AppointmentsList, options?: AxiosRequestConfig) {
        return AppointmentsListApiFp(this.configuration).updateAppointment(id, appointmentsList, options).then((request) => request(this.axios, this.basePath));
    }
}


