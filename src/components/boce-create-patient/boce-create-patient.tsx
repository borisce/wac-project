import { Component, Host, Prop, h, State } from '@stencil/core';
import { AppointmentsListApiFactory, AppointmentsList, Configuration  } from '../../api/wac-project';

@Component({
  tag: 'boce-create-patient',
  styleUrl: 'boce-create-patient.css',
  shadow: true,
})
export class BoceCreatePatient {
  @State() isPatientCreated: boolean = false;
  @State() isLoggedOut: boolean = false;
  @State() isClosed: boolean = false;
  @Prop() apiBase: string;

  private handleLogout(event: Event) {
    event.preventDefault();
    this.isLoggedOut = true;
  }

  private handleClose(event: Event) {
    event.preventDefault();
    this.isClosed = true;
  }

  private handleCreatePatient(event: Event) {
    event.preventDefault();

    const nameInput = (event.target as HTMLElement).closest('form').querySelector('#name') as HTMLInputElement;
    const dateInput = (event.target as HTMLElement).closest('form').querySelector('#date') as HTMLInputElement;
    const beginTimeInput = (event.target as HTMLElement).closest('form').querySelector('#begintime') as HTMLInputElement;
    const endTimeInput = (event.target as HTMLElement).closest('form').querySelector('#endtime') as HTMLInputElement;
    const conditionInput = (event.target as HTMLElement).closest('form').querySelector('#condition') as HTMLInputElement;
    const noteInput = (event.target as HTMLElement).closest('form').querySelector('#note') as HTMLInputElement;

    const newAppointment: AppointmentsList = {
      id: '', // This will be generated by the server
      name: nameInput.value,
      date: dateInput.value,
      estimatedStart: beginTimeInput.value,
      estimatedEnd: endTimeInput.value,
      patientAppointed: true,
      condition: conditionInput.value,
      doctorNote: noteInput.value,
    };

    // Create configuration object with required properties
    const config: Configuration = {
      basePath: this.apiBase,
      isJsonMime: () => true, // Example implementation, adjust as needed
    };

    const apiInstance = AppointmentsListApiFactory(config);

    apiInstance.createAppointment(newAppointment)
      .then(() => {
        this.isPatientCreated = true;
      })
      .catch((error) => {
        console.error('Error creating appointment:', error);
      });
  }

  render() {
    if (this.isLoggedOut) {
      return (
        <boce-login api-base={this.apiBase}></boce-login>
      );
    }

    if (this.isPatientCreated || this.isClosed) {
      return (
        <boce-doctor-patients-list api-base={this.apiBase}></boce-doctor-patients-list>
      );
    }

    return (
      <Host>
        <header>
          <md-elevated-button onClick={(event) => this.handleLogout(event)}>Odhlásiť sa</md-elevated-button>
        </header>
        <h1>Vytvorenie celého záznamu vyšetrenia pacienta</h1>
        <form action="#">
          <div class="form-flex">
            <h3>Osobné údaje pacienta</h3>
            <label htmlFor="name">Meno a priezvisko</label>
            <input type="text" placeholder='meno a priezvisko' id="name" />
            <h3>Údaje o vyšetrení</h3>
            <label htmlFor="date">Dátum vyšetrenia</label>
            <input type="date" id="date" />
            <label htmlFor="begintime">Čas začiatku vyšetrenia</label>
            <input type="time" id="begintime" />
            <label htmlFor="endtime">Čas ukončenia vyšetrenia</label>
            <input type="time" id="endtime" />
            <label htmlFor="condition">Dôvod vyšetrenia</label>
            <input type="text" placeholder='' id="condition" />
            <label htmlFor="note">Záznam lekára o vykonanom vyšetrení</label>
            <input type="text" placeholder='' id="note" />
            <div class="button-flex">
              <md-elevated-button onClick={(event) => this.handleClose(event)}>Zrušiť</md-elevated-button>
              <md-elevated-button onClick={(event) => this.handleCreatePatient(event)}>Vytvoriť záznam o vyšetrení</md-elevated-button>
            </div>
          </div>  
        </form>
      </Host>
    );
  }
}
